Nucleus.Layouts = {

  updatePageTitle: function (titleText) {
    if (titleText != null) {
      this.titleText = titleText;
      Ember.run.debounce(this, this.setPageTitle, 100);
    }
  },

  setPageTitle: function () {
    //http://bugs.jquery.com/ticket/7825
    $(document).attr('title', this.titleText);
    this.titleText = null;
  },

  testingButton: function() {
    $('#test_toggle').on('click', function(e) {
      $('#ember-testing-container').toggle();
      e.preventDefault();
    });
  },

  // resize all is a debounced method of 100ms
  // (aka, it will attempt to run it, and after 100ms of not being called again it will actually)
  resizeAll: function () {
    Ember.run.debounce(this, this._resizeAll, 100);
  },

  resizeSearchViews: function () {
    Ember.run.debounce(this, this._resizeSearchViews, 100);
  },

  _resizeAll: function () {
    Nucleus.Layouts.resizeStage();
    Nucleus.Layouts.resizeTopSections();
    Nucleus.Layouts.resizeBottomSections();
    Nucleus.Layouts.resizeWorkList();
    // This isnt really layout related, but it sets up the tooltips after all the DOM is in place and makes sure that it is also debounced.
    // It would be really nice to move tooltips and modals into Ember as components.
    Nucleus.ToolTips.triggerToolTips();
  },

  _resizeSearchViews: function () {
    Nucleus.Layouts.resizeStage();
    Nucleus.Layouts.resizeWorkList();
    Nucleus.Layouts.resizeMainColumns();
    Nucleus.ToolTips.triggerToolTips();
  },

  getStaticHeights: function () {
    var headerHeight = $("#mast_header").height(),
        navigationHeight = $("#master_navigation").height(),
        footerHeight = $("#footer").height();
       
       return (headerHeight + navigationHeight + footerHeight + 3);
  },

  resizeStage: function () {
    var staticHeights = Nucleus.isPopup ? 0 : this.getStaticHeights(),
        quickOptionsHeight = $("#quick_options").height(),
        stageElement = $("#stage");

    if ($(window).width() >= 1280) {
      $("#nucleus").width($(window).width());
    }

    stageElement.width($(window).width());
    stageElement.height($(window).height() - staticHeights);
    $("#results").height(stageElement.height() - quickOptionsHeight);
    $("#data_views").width(stageElement.width() - 240);
    $("#data_list_views").height(stageElement.height() - ($("#meta_data").height() - 1));

    var resizeCallback = function () {
      var resizedStage = $('#stage');

      if ($(this).width() >= 1280) {
        $("#nucleus").width($(this).width());
      }
      resizedStage.width($(window).width());
      resizedStage.height($(window).height() - staticHeights);
    };

    this.setupResizeEvent("resizeStage", resizeCallback);

  },

  resizeWorkList: function () {
    var worklistComponent = $("#worklist_component"),
      queue = $("#worklist_queues"),
      worklistHeader = $('#worklist_header'),
      worklistToolbar = $('#worklist_toolbar'),
      worklistPanels = $('#worklist_panels'),
      header = $("#mast_header"),
      navBar = $("#master_navigation"),
      footer = $("#footer");

    worklistComponent.height($(window).height() - (header.outerHeight() + navBar.outerHeight() + footer.outerHeight() + 1));
    worklistPanels.height(worklistComponent.outerHeight() - (worklistHeader.outerHeight() + worklistToolbar.outerHeight() + 14));

    var resizeCallback = function () {
      worklistComponent.height($(window).height() - (header.outerHeight() + navBar.outerHeight() + footer.outerHeight() + 1));
      worklistPanels.height(worklistComponent.outerHeight() - (worklistHeader.outerHeight() + worklistToolbar.outerHeight() + 14));
    };

    this.setupResizeEvent("resizeWorkList", resizeCallback);
  },

  resetTopSection: function (newHeight, defaultHeight) {
    var topSection = $("#top_section"),
        components = topSection.find('.component');

    if (newHeight < defaultHeight) {
       components.each(function(idx, component) {
       if ($(component).height() > defaultHeight) {
            $(component).height(defaultHeight);
          }
       });
    }
  },

  resizeTopSections: function () {
    var topSection = $("#top_section"),
      mainContainers = topSection.find(".component_left"),
      secondaryContainers = topSection.find(".component_right");

    secondaryContainers.width($(window).width() - (mainContainers.outerWidth() + 2));
    mainContainers.height(topSection.height());
    secondaryContainers.height(topSection.height());

    var resizeCallback = function () {
      secondaryContainers.width($(window).width() - (mainContainers.outerWidth() + 2));
      mainContainers.height(topSection.height());
      secondaryContainers.height(topSection.height());
    };

    this.setupResizeEvent("resizeTopSections", resizeCallback);
  },

  resizeBottomSections: function () {
    var topSection = $("#top_section"),
      bottomSection = $('#bottom_section'),
      componentHeader = bottomSection.find('.component_header'),
      componentScroller = bottomSection.find('.component_scroller'),
      mainContainers = bottomSection.find(".component_left"),
      secondaryContainers = bottomSection.find(".component_right"),
      stageElement = $("#stage"),
      initStageScrollBar = stageElement.hasScrollBar('horizontal'),
      initScrollbarHeight = 0;

    if (initStageScrollBar) {
      initScrollbarHeight = 17;
    }

    bottomSection.height(stageElement.height() - (topSection.height() + initScrollbarHeight)).width($(window).width());
    componentScroller.height(bottomSection.height() - (componentHeader.outerHeight() + 27));
    mainContainers.height(bottomSection.height());
    secondaryContainers.width($(window).width() - mainContainers.outerWidth());

    var resizeCallback = function () {
      var stageScrollBar = $("#stage").hasScrollBar('horizontal'),
        scrollbarHeight = 0;

      if (stageScrollBar) {
        scrollbarHeight = 17;
      }

      bottomSection.height($("#stage").height() - (topSection.height() + scrollbarHeight)).width($("#stage").width());
      componentScroller.height(bottomSection.height() - (componentHeader.outerHeight() + 27));
      mainContainers.height(bottomSection.height());
      secondaryContainers.width($(window).width() - mainContainers.outerWidth());
    };

    this.setupResizeEvent("resizeBottomSections", resizeCallback);
  },

  resizeMainColumns: function () {
    //Nucleus.Layouts.resizeLeftColumn();
    Nucleus.Layouts.resizeColumnHeights();
    Nucleus.Layouts.resizeRightColumn();
  },

  resizeColumnHeights: function () {
    var columns = $('#columns'),
        header = $("#mast_header"),
        navBar = $("#master_navigation"),
        footer = $("#footer"),
        componentScroller = columns.find('.component_scroller'),
        componentHeader = columns.find('.component_header');

    if ($(window).width() >= 1280) {
      $('#columns').width($(window).width());
    } else {
      $('#columns').width(1280);
    }

    columns.height($(window).height() - (header.outerHeight() + navBar.outerHeight() + footer.outerHeight() + 1));
    componentScroller.height(columns.height() - (componentHeader.outerHeight() + 27));

    var resizeCallback = function () {
      if ($(window).width() >= 1280) {
        $('#columns').width($(window).width());
      } else {
        $('#columns').width(1280);
      }
      columns.height($(window).height() - (header.outerHeight() + navBar.outerHeight() + footer.outerHeight() + 1));
      componentScroller.height(columns.height() - (componentHeader.outerHeight() + 27));
    };

    this.setupResizeEvent("resizeColumnHeights", resizeCallback);
  },

  // This could be used to make a left column expand if a right column is non-existent
  resizeLeftColumn: function () {
    var leftColumn = $("#left_column_main"),
        rightColumn = $("#right_column_main"),
        components = leftColumn.find(".component");
     
    leftColumn.width($(window).width() - rightColumn.outerWidth());
    
    var resizeCallback = function () {
      leftColumn.width($(window).width() - rightColumn.outerWidth());
    };

    this.setupResizeEvent("resizeLeftColumn", resizeCallback);
  },

  resizeRightColumn: function () {
    var leftColumn = $("#left_column_main"),
        rightColumn = $("#right_column_main"),
        rightColumnComponents = rightColumn.find('.component'),
        rightColumnComponentsCount = rightColumnComponents.length;

    rightColumn.width($('#columns').width() - (leftColumn.outerWidth() + 2));

    var resizeCallback = function () {
      rightColumn.width($('#columns').width() - (leftColumn.outerWidth() + 2));
    };

    this.setupResizeEvent("resizeRightColumn", resizeCallback);
  },

  setupResizeEvent: function (previousHookName, callback) {
    var key = previousHookName + "-key",
      previousHook = this[key];

    // remove any previous hook from the resize event
    if (previousHook) {
      $(window).off("throttledresize", previousHook);
    }

    // hook up the callback to the resize event
    $(window).on("throttledresize", callback);

    // keep track of any resize event (in case we need to remove it later)
    this[key] = callback;
  }

};